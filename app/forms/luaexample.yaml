# 表单 编码
code: luaexample
#作者
author: test
#版本号
version: 1.0.0
#最后更新时间
updateDate: 2020-09-21 20:35:00
type: QUERY
title: 测试表单
# 描述
description:

# 参数描述.
# name 参数名，policy 策略（Must 必填、Option 可选，Maybe 特定条件必填） label 参数描述名称
# type 参数类型（Int 整形、String 文本、Date 日期、DateTime 日期时间）、具体的自定义类型(包括新增的字典)
# verify 用于作为校验的校验规则名
parameters:
    - {name: testType, policy: Must, label: 测试一下, type: String,tip: 输入测试条件, verify: user_name }
#Query 结果集合
resultset:
  - {name: id, label: 类型, type: String,expr: null,inner: d_id }
  - {name: name, label: 名称, type: String,expr: null,inner: d_name }
  - {name: apps, label: 备注, type: String,expr: null,inner: d_memo }
tools:
  - {name: del,label: 删除}
response:
  type: direct
  options: {}
extends:
# 脚本类型 SQL、GET、POST、LUA
scriptType: LUA
script: |
  log(package.path)
  db=require("db")
  json=require("dkjson")
  result,pos,err=json.decode('{"code":0,"a":"123"}')
  log(_inputs.testType)
  log(result.a)

  one= {}
  one.code="11"
  one.id="a1"
  one.name="测试"
  one.a="haha"
  one.memo="memo!!"
  result.data={one}

  log("haha ,lua run it")
  user= {}
  user.Id="test1"
  log(user)
  u,e=db.find("user","findbyid",user)
  log("ok")
  log(e)
  log(u.apps)
  user.role=1
  us,e=db.query("user","querybyrole",user)
  result.data={u}
  log(us)
  for k,v in pairs(us) do
    table.insert(result.data, v)
  end
  user.Id="mytest1"
  user.Name="我的测试账户"
  dbid,e,msg=db.insert("user","addnewuser",user)
  log(dbid)
  log(e)
  log(msg)
  user.Name="新改的名字"
  c,e=db.update("user","updateuser",user)
  log(c)
  log(e)
  --[[
  c,e=db.delete("user","deleteuser",user)
  log(c)
  log(e)
  ]]

  return result